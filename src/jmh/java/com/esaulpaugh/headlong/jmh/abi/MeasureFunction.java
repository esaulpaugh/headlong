/*
   Copyright 2018 Evan Saulpaugh

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
package com.esaulpaugh.headlong.jmh.abi;

import com.esaulpaugh.headlong.abi.Function;
import com.esaulpaugh.headlong.abi.Triple;
import com.esaulpaugh.headlong.abi.Tuple;
import com.esaulpaugh.headlong.abi.TypeFactory;
import com.esaulpaugh.headlong.util.FastHex;
import com.esaulpaugh.headlong.util.Strings;
import org.openjdk.jmh.annotations.Benchmark;
import org.openjdk.jmh.annotations.BenchmarkMode;
import org.openjdk.jmh.annotations.Fork;
import org.openjdk.jmh.annotations.Measurement;
import org.openjdk.jmh.annotations.Mode;
import org.openjdk.jmh.annotations.OutputTimeUnit;
import org.openjdk.jmh.annotations.Scope;
import org.openjdk.jmh.annotations.State;
import org.openjdk.jmh.annotations.Warmup;
import org.openjdk.jmh.infra.Blackhole;

import java.math.BigInteger;
import java.util.concurrent.TimeUnit;

import static com.esaulpaugh.headlong.jmh.Main.THREE;

@State(Scope.Benchmark)
public class MeasureFunction {

    private static final Function F = new Function("sam(bytes,bool,uint256[])", "(bytes,uint256[3],bool)");
    private static final Triple<byte[], Boolean, BigInteger[]> ARGS = Tuple.of(
            Strings.decode("dave", Strings.UTF_8),
            true,
            new BigInteger[] { BigInteger.ONE, BigInteger.valueOf(2), BigInteger.valueOf(3) }
    );

    private static final Function BIG_RETURN_FUNCTION = Function.parse("()", "(uint256[19],int[],(bool,uint64,address),(string,bytes,bool[])[])");

    private static final String

    private static final byte[] BIG_RETURN = Strings.decode(BIG_RETURN_HEX);

    private static final byte[] CALL = Strings.decode("a5643bf20000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000464617665000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003");
    private static final byte[] RETURN = Strings.decode("00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000046461766500000000000000000000000000000000000000000000000000000000");

    @Benchmark
    @Fork(value = 1, warmups = 1)
    @BenchmarkMode(Mode.AverageTime)
    @Warmup(iterations = 1)
    @Measurement(iterations = THREE)
    @OutputTimeUnit(TimeUnit.NANOSECONDS)
    public void encode_call(Blackhole blackhole) {
        blackhole.consume(F.encodeCall(ARGS));
    }

    @Benchmark
    @Fork(value = 1, warmups = 1)
    @BenchmarkMode(Mode.AverageTime)
    @Warmup(iterations = 1)
    @Measurement(iterations = THREE)
    @OutputTimeUnit(TimeUnit.NANOSECONDS)
    public void decode_call(Blackhole blackhole) {
        blackhole.consume(F.decodeCall(CALL));
    }

    @Benchmark
    @Fork(value = 1, warmups = 1)
    @BenchmarkMode(Mode.AverageTime)
    @Warmup(iterations = 1)
    @Measurement(iterations = THREE)
    @OutputTimeUnit(TimeUnit.NANOSECONDS)
    public void decode_index_slow(Blackhole blackhole) {
        blackhole.consume(F.decodeReturn(RETURN).get(2));
    }

    @Benchmark
    @Fork(value = 1, warmups = 1)
    @BenchmarkMode(Mode.AverageTime)
    @Warmup(iterations = 1)
    @Measurement(iterations = THREE)
    @OutputTimeUnit(TimeUnit.NANOSECONDS)
    public void decode_index_fast(Blackhole blackhole) {
        blackhole.consume(F.decodeReturn(RETURN, 2));
    }

    @Benchmark
    @Fork(value = 1, warmups = 1)
    @BenchmarkMode(Mode.AverageTime)
    @Warmup(iterations = 1)
    @Measurement(iterations = THREE)
    @OutputTimeUnit(TimeUnit.NANOSECONDS)
    public void init_function(Blackhole blackhole) {
        blackhole.consume(Function.parse("sam(bytes,bool,uint256[])"));
    }

    @Benchmark
    @Fork(value = 1, warmups = 1)
    @BenchmarkMode(Mode.AverageTime)
    @Warmup(iterations = 1)
    @Measurement(iterations = THREE)
    @OutputTimeUnit(TimeUnit.NANOSECONDS)
    public void parse_tuple_type(Blackhole blackhole) {
        blackhole.consume(TypeFactory.create("(int,bool,string,uint8,bytes5,fixed)"));
    }

    @Benchmark
    @Fork(value = 1, warmups = 1)
    @BenchmarkMode(Mode.AverageTime)
    @Warmup(iterations = 1)
    @Measurement(iterations = THREE)
    @OutputTimeUnit(TimeUnit.NANOSECONDS)
    public void decode_big_return(Blackhole blackhole) {
        blackhole.consume(BIG_RETURN_FUNCTION.decodeReturn(BIG_RETURN));
    }

    @Benchmark
    @Fork(value = 1, warmups = 1)
    @BenchmarkMode(Mode.AverageTime)
    @Warmup(iterations = 1)
    @Measurement(iterations = THREE)
    @OutputTimeUnit(TimeUnit.NANOSECONDS)
    public void decode_big_hex_return(Blackhole blackhole) {
        blackhole.consume(BIG_RETURN_FUNCTION.decodeReturn(FastHex.decode(BIG_RETURN_HEX)));
    }
}
import org.gradle.internal.jvm.Jvm

import java.text.SimpleDateFormat

plugins {
    id 'java-library'
    id 'maven-publish'
}

group 'com.esaulpaugh'
archivesBaseName = "headlong"
version '6.0.0-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileJava {
    if (Jvm.current().getJavaVersion() > JavaVersion.VERSION_1_8) {
        options.compilerArgs.addAll(['--release', '8'])
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

test {
    maxParallelForks = Runtime.runtime.availableProcessors()
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc' // deprecated
    from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources' // deprecated
    from sourceSets.main.allSource
    finalizedBy(javadocJar)
}

def junitVersion = '5.8.2'
def jmhVersion = '1.34'
def bcVersion = '1.70'

static def todayUTC() {
    SimpleDateFormat sdf = new SimpleDateFormat("MMMMM d yyyy")
    sdf.setTimeZone(TimeZone.getTimeZone("UTC"))
    return sdf.format(new Date())
}

jar {
    manifest {
        attributes(
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Automatic-Module-Name': project.name,
                'Build-Date': todayUTC()
        )
    }
    finalizedBy(sourcesJar)
}

artifacts {
    archives javadocJar, sourcesJar
}

publishing {
    publications {
        headlong(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
        }
    }
}

sourceSets {
    jmh {
        java.srcDirs = ['src/jmh/java']
        compileClasspath += sourceSets.main.runtimeClasspath
    }
}

repositories {
    mavenCentral()
}

dependencies {

    implementation 'com.google.code.gson:gson:2.9.0'

    test.useJUnitPlatform()
    testImplementation 'org.junit.jupiter:junit-jupiter-api:' + junitVersion
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:' + junitVersion
    testImplementation 'org.bouncycastle:bcprov-jdk15on:' + bcVersion

    jmhImplementation 'commons-codec:commons-codec:1.15'
    jmhImplementation 'org.openjdk.jmh:jmh-core:' + jmhVersion
    jmhAnnotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:' + jmhVersion
    jmhImplementation 'org.bouncycastle:bcprov-jdk15on:' + bcVersion
}

task jmh(type: JavaExec, dependsOn: jmhClasses) { // run benchmarks with `gradle jmh`
    main = 'org.openjdk.jmh.Main'
    classpath = sourceSets.jmh.compileClasspath + sourceSets.jmh.runtimeClasspath
}

classes.finalizedBy(jmhClasses)
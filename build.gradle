import org.gradle.internal.jvm.Jvm

import java.time.format.DateTimeFormatter

plugins {
    id 'java-library'
    id 'maven-publish'
}

group 'com.esaulpaugh'
archivesBaseName = "headlong"
version '9.1.2-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileJava {
    if (Jvm.current().getJavaVersion() > JavaVersion.VERSION_1_8) {
        options.compilerArgs.addAll(['--release', '8'])
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

test {
    maxParallelForks = Runtime.runtime.availableProcessors()
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    getArchiveClassifier().set("javadoc")
    from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    getArchiveClassifier().set("sources")
    from sourceSets.main.allSource
    finalizedBy(javadocJar)
}

final String junitVersion = "5.9.1"
final String jmhVersion = "1.36"
final String bcVersion = "1.72"
final DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("MMMM d yyyy", Locale.ENGLISH).withZone(ZoneId.of("UTC"))

jar {
    manifest {
        attributes(
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Automatic-Module-Name': project.name,
                'Build-Date': dateFormatter.format(Instant.now())
        )
    }
    finalizedBy(sourcesJar)
}

artifacts {
    archives javadocJar, sourcesJar
}

publishing {
    publications {
        headlong(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
        }
    }
}

sourceSets {
    jmh {
        java.srcDirs = ['src/jmh/java']
        compileClasspath += sourceSets.main.runtimeClasspath
    }
}

repositories {
    mavenCentral()
}

dependencies {

    implementation("com.google.code.gson:gson:2.10")

    test.useJUnitPlatform()
    testImplementation("org.junit.jupiter:junit-jupiter-api:" + junitVersion)
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:" + junitVersion)
    testImplementation("org.bouncycastle:bcprov-jdk14:" + bcVersion)

    jmhImplementation("commons-codec:commons-codec:1.15")
    jmhImplementation("org.openjdk.jmh:jmh-core:" + jmhVersion)
    jmhAnnotationProcessor("org.openjdk.jmh:jmh-generator-annprocess:" + jmhVersion)
    jmhImplementation("org.bouncycastle:bcprov-jdk14:" + bcVersion)
}

task jmh(type: JavaExec, dependsOn: jmhClasses) { // run benchmarks with `gradle jmh`
    getMainClass().set("org.openjdk.jmh.Main")
    classpath = sourceSets.jmh.compileClasspath + sourceSets.jmh.runtimeClasspath
}

classes.finalizedBy(jmhClasses)

tasks.withType(AbstractArchiveTask).configureEach {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}